1)Complete the method/function so that it converts dash/underscore delimited words into camel casing. The first word within the output should be capitalized only if the original word was capitalized (known as Upper Camel Case, also often referred to as Pascal case). The next words should be always capitalized.

Examples
"the-stealth-warrior" gets converted to "theStealthWarrior"
"The_Stealth_Warrior" gets converted to "TheStealthWarrior"
"The_Stealth-Warrior" gets converted to "TheStealthWarrior"

      Sol:
          using System;
using System.Linq;
public class Kata
{
  public static string ToCamelCase(string str)
  {
    var s=str.Split(new char[]{'-','_'});
    string result=s[0];
    
    for(int i=1;i<=s.Length-1;i++){
      if(s[i].Length>0){
        result+=char.ToUpper(s[i][0])+s[i].Substring(1);
      }
    }
    return result;
  }
}


2)Write a function that removes the spaces from the string, then return the resultant string

Examples (Input -> Output):

"8 j 8   mBliB8g  imjB8B8  jl  B" -> "8j8mBliB8gimjB8B8jlB"
"8 8 Bi fk8h B 8 BB8B B B  B888 c hl8 BhB fd" -> "88Bifk8hB8BB8BBBB888chl8BhBfd"
"8aaaaa dddd r     " -> "8aaaaaddddr"
Sol:
        namespace Solution 
        {
          public static class SpacesRemover
          {
            public static string NoSpace(string input)
            {
               string val =input.Replace(" ","");
              return val;
            }  
          }
        }


3)A Narcissistic Number (or Armstrong Number) is a positive number which is the sum of its own digits, each raised to the power of the number of digits in a given base. In this Kata, we will restrict ourselves to decimal (base 10).
            
            For example, take 153 (3 digits), which is narcissistic:
                1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153
            and 1652 (4 digits), which isn't:          
                1^4 + 6^4 + 5^4 + 2^4 = 1 + 1296 + 625 + 16 = 1938
            The Challenge:
            Your code must return true or false (not 'true' and 'false') depending upon whether the given number is a Narcissistic number in base 10.
            This may be True and False in your language, e.g. PHP.
            Error checking for text strings or other invalid inputs is not required, only valid positive non-zero integers will be passed into the function.

Solution:
       using System;
          public class Kata
          {
            public static bool Narcissistic(int value)
            {
              // Code me
              int digits = value.ToString().Length;
              string val = value.ToString();
              int result=0;
              for (int i=0;i<=digits-1;i++){
                
                  int digit = int.Parse(val[i].ToString()); 
                  result += (int)Math.Pow(digit, digits);   
                
                
              }
    

              
